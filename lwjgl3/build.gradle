buildscript {
  repositories {
    gradlePluginPortal()
    mavenCentral()
  }
}

plugins {
  id "application"
}

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'com.EmbersTrial.lwjgl3.Lwjgl3Launcher'
application.setMainClass(mainClassName)
eclipse.project.name = appName + '-lwjgl3'

// Set Java compatibility to match the core project
java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

repositories {
  mavenCentral()
}

dependencies {
  // JavaFX dependencies

  // LWJGL3 backend and platform-specific dependencies
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

  // Dependency on the core module
  implementation project(':core')

  // AWS SDK for S3 functionality
  implementation "software.amazon.awssdk:s3:2.20.0"
  implementation "software.amazon.awssdk:auth:2.20.0"

  // SLF4J simple logging implementation
  implementation 'org.slf4j:slf4j-simple:1.7.36'
}

run {
  workingDir = rootProject.file('assets').path
  setIgnoreExitValue(true)

  // macOS-specific JVM argument for LWJGL3
  if (System.properties['os.name'].toLowerCase().contains('mac')) {
    jvmArgs += "-XstartOnFirstThread"
  }

  // Add JavaFX modules at runtime
  jvmArgs += [
    "--module-path", rootProject.file("javafxsdk/javafx-sdk-23.0.1/lib").path,
    "--add-modules", "javafx.controls,javafx.media,javafx.swing"
  ]
}

jar {
  // Set the name of the output JAR file
  archiveFileName.set("${appName}-${projectVersion}.jar")
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  manifest {
    attributes 'Main-Class': project.mainClassName
  }
}

tasks.register('dist') {
  dependsOn 'jar'
}

distributions {
  main {
    contents {
      into('libs') {
        project.configurations.runtimeClasspath.files.findAll { file ->
          file.getName() != project.tasks.jar.outputs.files.singleFile.name
        }.each { file ->
          exclude file.name
        }
      }
    }
  }
}

startScripts.dependsOn(':lwjgl3:jar')
startScripts.classpath = project.tasks.jar.outputs.files
